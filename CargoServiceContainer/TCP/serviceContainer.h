#ifndef TRIPLESERVER_H
#define TRIPLESERVER_H

// Qt stuff here...
#include <QTcpServer>
#include <QSettings>
#include <QStringList>
#include <QMap>
#include <QJsonArray>
#include <QJsonObject>
#include <QJSEngine>
#include <QMutex>
#include <QMutexLocker>
#include "../gen/rpc.pb.h"
#include "messageprocessor.hpp"

class Session;

/**
 * @brief Service Container is a TCP server. It's use to interface
 * c++ class functionality over a network.
 */
class ServiceContainer : public QTcpServer
{
    // The instance to the server itself...
    static ServiceContainer* instance;

    // plugins...
    QMap<QString, QObject*> loadPluginObjects();

    // Listeners.
    void setListeners(Session* session);

    // The port
    quint16 port;

    // Contain metadata informations.
    QMap<QString, QJsonObject> metaInfos;

    // That contain the list engines assciated with their
    // session id.
    QMap<QString, QJSEngine*> engines;

    // The list of channel to list at.
    QStringList listeners;

    // Use it to protect engines map access.
    QMutex mutex;

    // The message processor.
    MessageProcessor* messageProcessor;

    Q_OBJECT
public:
    explicit ServiceContainer(QObject *parent = 0);
    void startServer();
    virtual ~ServiceContainer();

    /**
     * A singleton to the server
     **/
    static ServiceContainer *getInstance();

    /**
     * Set port.
     */
    void setPort(quint16 port);

    /**
     * Get an object with his typeName.
     **/
    QObject* getObjectByTypeName(QString typeName);

private slots:
    /**
     * @brief onSessionEnd function called when the session is terminated.
     */
    void onSessionEnd(QString);

protected:
    void incomingConnection(qintptr socketDescriptor);


public slots:
    //////////////////////////////////////////////
    // Service Container api.
    /////////////////////////////////////////////

    /**
     * @brief Ping
     * @return
     */
    QString Ping();

    /**
     * @brief ExecuteJsFunction
     * That function is use to run JS script. It return a list of QObject.
     * @return A list of object generated by the script.
     */
    QVariantList ExecuteJsFunction(QVariantList);

    /**
     * @brief GetServicesClientCode
     * Return the client side source code to inject in the VM to be able to
     * make remote methode call.
     * @return
     */
    QString GetServicesClientCode();

    /**
     * @brief GetActionInfos
     * Return plugin and array of JSON object of the form:
     * [{"IID":"plugin_1",
     *  "actions":[
     *              { "name":"action_1","doc":"@api 1.0... ",
     *                "parameters":[{"name":"p0", "type":"string", "isArray":"false"}, ...],
     *                "results":[{"name":"r0", "type":"string", "isArray":"false"}, ...]
     *              ]}, ...
     *             ]}
     * ]
     * @return
     */
    QJsonArray GetActionInfos();

    /**
     * @brief GetListeners Return the list of channel to listen at.
     * @return
     */
    QStringList GetListeners();

};

#endif // TRIPLESERVER_H
