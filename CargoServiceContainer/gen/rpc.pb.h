// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_INCLUDED_rpc_2eproto
#define PROTOBUF_INCLUDED_rpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rpc_2eproto 

namespace protobuf_rpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rpc_2eproto
namespace com {
namespace mycelius {
namespace message {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace message
}  // namespace mycelius
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::mycelius::message::Data* Arena::CreateMaybeMessage<::com::mycelius::message::Data>(Arena*);
template<> ::com::mycelius::message::Error* Arena::CreateMaybeMessage<::com::mycelius::message::Error>(Arena*);
template<> ::com::mycelius::message::Event* Arena::CreateMaybeMessage<::com::mycelius::message::Event>(Arena*);
template<> ::com::mycelius::message::Message* Arena::CreateMaybeMessage<::com::mycelius::message::Message>(Arena*);
template<> ::com::mycelius::message::Request* Arena::CreateMaybeMessage<::com::mycelius::message::Request>(Arena*);
template<> ::com::mycelius::message::Response* Arena::CreateMaybeMessage<::com::mycelius::message::Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace mycelius {
namespace message {

enum Data_DataType {
  Data_DataType_DOUBLE = 0,
  Data_DataType_INTEGER = 1,
  Data_DataType_STRING = 2,
  Data_DataType_BYTES = 3,
  Data_DataType_JSON_STR = 4,
  Data_DataType_BOOLEAN = 5
};
bool Data_DataType_IsValid(int value);
const Data_DataType Data_DataType_DataType_MIN = Data_DataType_DOUBLE;
const Data_DataType Data_DataType_DataType_MAX = Data_DataType_BOOLEAN;
const int Data_DataType_DataType_ARRAYSIZE = Data_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Data_DataType_descriptor();
inline const ::std::string& Data_DataType_Name(Data_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Data_DataType_descriptor(), value);
}
inline bool Data_DataType_Parse(
    const ::std::string& name, Data_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Data_DataType>(
    Data_DataType_descriptor(), name, value);
}
enum Message_MessageType {
  Message_MessageType_REQUEST = 0,
  Message_MessageType_RESPONSE = 1,
  Message_MessageType_ERROR = 2,
  Message_MessageType_EVENT = 3,
  Message_MessageType_TRANSFER = 4
};
bool Message_MessageType_IsValid(int value);
const Message_MessageType Message_MessageType_MessageType_MIN = Message_MessageType_REQUEST;
const Message_MessageType Message_MessageType_MessageType_MAX = Message_MessageType_TRANSFER;
const int Message_MessageType_MessageType_ARRAYSIZE = Message_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor();
inline const ::std::string& Message_MessageType_Name(Message_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_MessageType_descriptor(), value);
}
inline bool Message_MessageType_Parse(
    const ::std::string& name, Message_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_MessageType>(
    Message_MessageType_descriptor(), name, value);
}
// ===================================================================

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.mycelius.message.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(NULL);
  }

  Data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Data_DataType DataType;
  static const DataType DOUBLE =
    Data_DataType_DOUBLE;
  static const DataType INTEGER =
    Data_DataType_INTEGER;
  static const DataType STRING =
    Data_DataType_STRING;
  static const DataType BYTES =
    Data_DataType_BYTES;
  static const DataType JSON_STR =
    Data_DataType_JSON_STR;
  static const DataType BOOLEAN =
    Data_DataType_BOOLEAN;
  static inline bool DataType_IsValid(int value) {
    return Data_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Data_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Data_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Data_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return Data_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return Data_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return Data_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required bytes dataBytes = 2;
  bool has_databytes() const;
  void clear_databytes();
  static const int kDataBytesFieldNumber = 2;
  const ::std::string& databytes() const;
  void set_databytes(const ::std::string& value);
  #if LANG_CXX11
  void set_databytes(::std::string&& value);
  #endif
  void set_databytes(const char* value);
  void set_databytes(const void* value, size_t size);
  ::std::string* mutable_databytes();
  ::std::string* release_databytes();
  void set_allocated_databytes(::std::string* databytes);

  // optional string typeName = 4;
  bool has_typename_() const;
  void clear_typename_();
  static const int kTypeNameFieldNumber = 4;
  const ::std::string& typename_() const;
  void set_typename_(const ::std::string& value);
  #if LANG_CXX11
  void set_typename_(::std::string&& value);
  #endif
  void set_typename_(const char* value);
  void set_typename_(const char* value, size_t size);
  ::std::string* mutable_typename_();
  ::std::string* release_typename_();
  void set_allocated_typename_(::std::string* typename_);

  // required .com.mycelius.message.Data.DataType type = 3 [default = BYTES];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::com::mycelius::message::Data_DataType type() const;
  void set_type(::com::mycelius::message::Data_DataType value);

  // @@protoc_insertion_point(class_scope:com.mycelius.message.Data)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_databytes();
  void clear_has_databytes();
  void set_has_type();
  void clear_has_type();
  void set_has_typename_();
  void clear_has_typename_();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr databytes_;
  ::google::protobuf::internal::ArenaStringPtr typename__;
  int type_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.mycelius.message.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.mycelius.message.Data params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  ::com::mycelius::message::Data* mutable_params(int index);
  ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >*
      mutable_params();
  const ::com::mycelius::message::Data& params(int index) const;
  ::com::mycelius::message::Data* add_params();
  const ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >&
      params() const;

  // required string method = 1;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // required string id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.mycelius.message.Request)
 private:
  void set_has_method();
  void clear_has_method();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data > params_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.mycelius.message.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.mycelius.message.Data results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::com::mycelius::message::Data* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >*
      mutable_results();
  const ::com::mycelius::message::Data& results(int index) const;
  ::com::mycelius::message::Data* add_results();
  const ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >&
      results() const;

  // required string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.mycelius.message.Response)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data > results_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.mycelius.message.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(NULL);
  }

  Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required string id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.mycelius.message.Error)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_message();
  void clear_has_message();
  void set_has_id();
  void clear_has_id();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.mycelius.message.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.mycelius.message.Data evtData = 3;
  int evtdata_size() const;
  void clear_evtdata();
  static const int kEvtDataFieldNumber = 3;
  ::com::mycelius::message::Data* mutable_evtdata(int index);
  ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >*
      mutable_evtdata();
  const ::com::mycelius::message::Data& evtdata(int index) const;
  ::com::mycelius::message::Data* add_evtdata();
  const ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >&
      evtdata() const;

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.mycelius.message.Event)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data > evtdata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.mycelius.message.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_MessageType MessageType;
  static const MessageType REQUEST =
    Message_MessageType_REQUEST;
  static const MessageType RESPONSE =
    Message_MessageType_RESPONSE;
  static const MessageType ERROR =
    Message_MessageType_ERROR;
  static const MessageType EVENT =
    Message_MessageType_EVENT;
  static const MessageType TRANSFER =
    Message_MessageType_TRANSFER;
  static inline bool MessageType_IsValid(int value) {
    return Message_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Message_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Message_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Message_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Message_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Message_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes data = 8;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string id = 9;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 9;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .com.mycelius.message.Request rqst = 4;
  bool has_rqst() const;
  void clear_rqst();
  static const int kRqstFieldNumber = 4;
  private:
  const ::com::mycelius::message::Request& _internal_rqst() const;
  public:
  const ::com::mycelius::message::Request& rqst() const;
  ::com::mycelius::message::Request* release_rqst();
  ::com::mycelius::message::Request* mutable_rqst();
  void set_allocated_rqst(::com::mycelius::message::Request* rqst);

  // optional .com.mycelius.message.Response rsp = 5;
  bool has_rsp() const;
  void clear_rsp();
  static const int kRspFieldNumber = 5;
  private:
  const ::com::mycelius::message::Response& _internal_rsp() const;
  public:
  const ::com::mycelius::message::Response& rsp() const;
  ::com::mycelius::message::Response* release_rsp();
  ::com::mycelius::message::Response* mutable_rsp();
  void set_allocated_rsp(::com::mycelius::message::Response* rsp);

  // optional .com.mycelius.message.Error err = 6;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 6;
  private:
  const ::com::mycelius::message::Error& _internal_err() const;
  public:
  const ::com::mycelius::message::Error& err() const;
  ::com::mycelius::message::Error* release_err();
  ::com::mycelius::message::Error* mutable_err();
  void set_allocated_err(::com::mycelius::message::Error* err);

  // optional .com.mycelius.message.Event evt = 7;
  bool has_evt() const;
  void clear_evt();
  static const int kEvtFieldNumber = 7;
  private:
  const ::com::mycelius::message::Event& _internal_evt() const;
  public:
  const ::com::mycelius::message::Event& evt() const;
  ::com::mycelius::message::Event* release_evt();
  ::com::mycelius::message::Event* mutable_evt();
  void set_allocated_evt(::com::mycelius::message::Event* evt);

  // required sint32 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // required int32 total = 3;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 3;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // required .com.mycelius.message.Message.MessageType type = 1 [default = ERROR];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::com::mycelius::message::Message_MessageType type() const;
  void set_type(::com::mycelius::message::Message_MessageType value);

  // @@protoc_insertion_point(class_scope:com.mycelius.message.Message)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_index();
  void clear_has_index();
  void set_has_total();
  void clear_has_total();
  void set_has_rqst();
  void clear_has_rqst();
  void set_has_rsp();
  void clear_has_rsp();
  void set_has_err();
  void clear_has_err();
  void set_has_evt();
  void clear_has_evt();
  void set_has_data();
  void clear_has_data();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::com::mycelius::message::Request* rqst_;
  ::com::mycelius::message::Response* rsp_;
  ::com::mycelius::message::Error* err_;
  ::com::mycelius::message::Event* evt_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 total_;
  int type_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// required string name = 1;
inline bool Data::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Data::name() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Data.name)
  return name_.GetNoArena();
}
inline void Data::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Data.name)
}
#if LANG_CXX11
inline void Data::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Data.name)
}
#endif
inline void Data::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Data.name)
}
inline void Data::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Data.name)
}
inline ::std::string* Data::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Data.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_name() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Data.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Data.name)
}

// required bytes dataBytes = 2;
inline bool Data::has_databytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_databytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_databytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_databytes() {
  databytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_databytes();
}
inline const ::std::string& Data::databytes() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Data.dataBytes)
  return databytes_.GetNoArena();
}
inline void Data::set_databytes(const ::std::string& value) {
  set_has_databytes();
  databytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Data.dataBytes)
}
#if LANG_CXX11
inline void Data::set_databytes(::std::string&& value) {
  set_has_databytes();
  databytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Data.dataBytes)
}
#endif
inline void Data::set_databytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_databytes();
  databytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Data.dataBytes)
}
inline void Data::set_databytes(const void* value, size_t size) {
  set_has_databytes();
  databytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Data.dataBytes)
}
inline ::std::string* Data::mutable_databytes() {
  set_has_databytes();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Data.dataBytes)
  return databytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_databytes() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Data.dataBytes)
  if (!has_databytes()) {
    return NULL;
  }
  clear_has_databytes();
  return databytes_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_databytes(::std::string* databytes) {
  if (databytes != NULL) {
    set_has_databytes();
  } else {
    clear_has_databytes();
  }
  databytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), databytes);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Data.dataBytes)
}

// required .com.mycelius.message.Data.DataType type = 3 [default = BYTES];
inline bool Data::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::com::mycelius::message::Data_DataType Data::type() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Data.type)
  return static_cast< ::com::mycelius::message::Data_DataType >(type_);
}
inline void Data::set_type(::com::mycelius::message::Data_DataType value) {
  assert(::com::mycelius::message::Data_DataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.mycelius.message.Data.type)
}

// optional string typeName = 4;
inline bool Data::has_typename_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::set_has_typename_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data::clear_has_typename_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data::clear_typename_() {
  typename__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_typename_();
}
inline const ::std::string& Data::typename_() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Data.typeName)
  return typename__.GetNoArena();
}
inline void Data::set_typename_(const ::std::string& value) {
  set_has_typename_();
  typename__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Data.typeName)
}
#if LANG_CXX11
inline void Data::set_typename_(::std::string&& value) {
  set_has_typename_();
  typename__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Data.typeName)
}
#endif
inline void Data::set_typename_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_typename_();
  typename__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Data.typeName)
}
inline void Data::set_typename_(const char* value, size_t size) {
  set_has_typename_();
  typename__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Data.typeName)
}
inline ::std::string* Data::mutable_typename_() {
  set_has_typename_();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Data.typeName)
  return typename__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_typename_() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Data.typeName)
  if (!has_typename_()) {
    return NULL;
  }
  clear_has_typename_();
  return typename__.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_typename_(::std::string* typename_) {
  if (typename_ != NULL) {
    set_has_typename_();
  } else {
    clear_has_typename_();
  }
  typename__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), typename_);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Data.typeName)
}

// -------------------------------------------------------------------

// Request

// required string method = 1;
inline bool Request::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& Request::method() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Request.method)
  return method_.GetNoArena();
}
inline void Request::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Request.method)
}
#if LANG_CXX11
inline void Request::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Request.method)
}
#endif
inline void Request::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Request.method)
}
inline void Request::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Request.method)
}
inline ::std::string* Request::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Request.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_method() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Request.method)
  if (!has_method()) {
    return NULL;
  }
  clear_has_method();
  return method_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Request.method)
}

// repeated .com.mycelius.message.Data params = 2;
inline int Request::params_size() const {
  return params_.size();
}
inline void Request::clear_params() {
  params_.Clear();
}
inline ::com::mycelius::message::Data* Request::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Request.params)
  return params_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >*
Request::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:com.mycelius.message.Request.params)
  return &params_;
}
inline const ::com::mycelius::message::Data& Request::params(int index) const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Request.params)
  return params_.Get(index);
}
inline ::com::mycelius::message::Data* Request::add_params() {
  // @@protoc_insertion_point(field_add:com.mycelius.message.Request.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >&
Request::params() const {
  // @@protoc_insertion_point(field_list:com.mycelius.message.Request.params)
  return params_;
}

// required string id = 3;
inline bool Request::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Request::id() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Request.id)
  return id_.GetNoArena();
}
inline void Request::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Request.id)
}
#if LANG_CXX11
inline void Request::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Request.id)
}
#endif
inline void Request::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Request.id)
}
inline void Request::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Request.id)
}
inline ::std::string* Request::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Request.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_id() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Request.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Request.id)
}

// -------------------------------------------------------------------

// Response

// repeated .com.mycelius.message.Data results = 1;
inline int Response::results_size() const {
  return results_.size();
}
inline void Response::clear_results() {
  results_.Clear();
}
inline ::com::mycelius::message::Data* Response::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Response.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >*
Response::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:com.mycelius.message.Response.results)
  return &results_;
}
inline const ::com::mycelius::message::Data& Response::results(int index) const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Response.results)
  return results_.Get(index);
}
inline ::com::mycelius::message::Data* Response::add_results() {
  // @@protoc_insertion_point(field_add:com.mycelius.message.Response.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >&
Response::results() const {
  // @@protoc_insertion_point(field_list:com.mycelius.message.Response.results)
  return results_;
}

// required string id = 2;
inline bool Response::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Response::id() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Response.id)
  return id_.GetNoArena();
}
inline void Response::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Response.id)
}
#if LANG_CXX11
inline void Response::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Response.id)
}
#endif
inline void Response::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Response.id)
}
inline void Response::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Response.id)
}
inline ::std::string* Response::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Response.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_id() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Response.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Response.id)
}

// -------------------------------------------------------------------

// Error

// required int32 code = 1;
inline bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Error::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Error::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Error.code)
  return code_;
}
inline void Error::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.mycelius.message.Error.code)
}

// required string message = 2;
inline bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Error.message)
  return message_.GetNoArena();
}
inline void Error::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Error.message)
}
#if LANG_CXX11
inline void Error::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Error.message)
}
#endif
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Error.message)
}
inline ::std::string* Error::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Error.message)
  if (!has_message()) {
    return NULL;
  }
  clear_has_message();
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Error.message)
}

// required string id = 3;
inline bool Error::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Error::id() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Error.id)
  return id_.GetNoArena();
}
inline void Error::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Error.id)
}
#if LANG_CXX11
inline void Error::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Error.id)
}
#endif
inline void Error::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Error.id)
}
inline void Error::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Error.id)
}
inline ::std::string* Error::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Error.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_id() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Error.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Error.id)
}

// optional bytes data = 4;
inline bool Error::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Error::data() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Error.data)
  return data_.GetNoArena();
}
inline void Error::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Error.data)
}
#if LANG_CXX11
inline void Error::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Error.data)
}
#endif
inline void Error::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Error.data)
}
inline void Error::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Error.data)
}
inline ::std::string* Error::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Error.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_data() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Error.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Error.data)
}

// -------------------------------------------------------------------

// Event

// required int32 code = 1;
inline bool Event::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Event::code() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Event.code)
  return code_;
}
inline void Event::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.mycelius.message.Event.code)
}

// required string name = 2;
inline bool Event::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Event::name() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Event.name)
  return name_.GetNoArena();
}
inline void Event::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Event.name)
}
#if LANG_CXX11
inline void Event::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Event.name)
}
#endif
inline void Event::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Event.name)
}
inline void Event::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Event.name)
}
inline ::std::string* Event::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Event.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_name() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Event.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Event.name)
}

// repeated .com.mycelius.message.Data evtData = 3;
inline int Event::evtdata_size() const {
  return evtdata_.size();
}
inline void Event::clear_evtdata() {
  evtdata_.Clear();
}
inline ::com::mycelius::message::Data* Event::mutable_evtdata(int index) {
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Event.evtData)
  return evtdata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >*
Event::mutable_evtdata() {
  // @@protoc_insertion_point(field_mutable_list:com.mycelius.message.Event.evtData)
  return &evtdata_;
}
inline const ::com::mycelius::message::Data& Event::evtdata(int index) const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Event.evtData)
  return evtdata_.Get(index);
}
inline ::com::mycelius::message::Data* Event::add_evtdata() {
  // @@protoc_insertion_point(field_add:com.mycelius.message.Event.evtData)
  return evtdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mycelius::message::Data >&
Event::evtdata() const {
  // @@protoc_insertion_point(field_list:com.mycelius.message.Event.evtData)
  return evtdata_;
}

// -------------------------------------------------------------------

// Message

// required .com.mycelius.message.Message.MessageType type = 1 [default = ERROR];
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Message::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::com::mycelius::message::Message_MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Message.type)
  return static_cast< ::com::mycelius::message::Message_MessageType >(type_);
}
inline void Message::set_type(::com::mycelius::message::Message_MessageType value) {
  assert(::com::mycelius::message::Message_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.mycelius.message.Message.type)
}

// required sint32 index = 2;
inline bool Message::has_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Message::index() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Message.index)
  return index_;
}
inline void Message::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.mycelius.message.Message.index)
}

// required int32 total = 3;
inline bool Message::has_total() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_total() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_total() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 Message::total() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Message.total)
  return total_;
}
inline void Message::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:com.mycelius.message.Message.total)
}

// optional .com.mycelius.message.Request rqst = 4;
inline bool Message::has_rqst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_rqst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_rqst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_rqst() {
  if (rqst_ != NULL) rqst_->Clear();
  clear_has_rqst();
}
inline const ::com::mycelius::message::Request& Message::_internal_rqst() const {
  return *rqst_;
}
inline const ::com::mycelius::message::Request& Message::rqst() const {
  const ::com::mycelius::message::Request* p = rqst_;
  // @@protoc_insertion_point(field_get:com.mycelius.message.Message.rqst)
  return p != NULL ? *p : *reinterpret_cast<const ::com::mycelius::message::Request*>(
      &::com::mycelius::message::_Request_default_instance_);
}
inline ::com::mycelius::message::Request* Message::release_rqst() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Message.rqst)
  clear_has_rqst();
  ::com::mycelius::message::Request* temp = rqst_;
  rqst_ = NULL;
  return temp;
}
inline ::com::mycelius::message::Request* Message::mutable_rqst() {
  set_has_rqst();
  if (rqst_ == NULL) {
    auto* p = CreateMaybeMessage<::com::mycelius::message::Request>(GetArenaNoVirtual());
    rqst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Message.rqst)
  return rqst_;
}
inline void Message::set_allocated_rqst(::com::mycelius::message::Request* rqst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rqst_;
  }
  if (rqst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rqst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rqst, submessage_arena);
    }
    set_has_rqst();
  } else {
    clear_has_rqst();
  }
  rqst_ = rqst;
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Message.rqst)
}

// optional .com.mycelius.message.Response rsp = 5;
inline bool Message::has_rsp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_rsp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_rsp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_rsp() {
  if (rsp_ != NULL) rsp_->Clear();
  clear_has_rsp();
}
inline const ::com::mycelius::message::Response& Message::_internal_rsp() const {
  return *rsp_;
}
inline const ::com::mycelius::message::Response& Message::rsp() const {
  const ::com::mycelius::message::Response* p = rsp_;
  // @@protoc_insertion_point(field_get:com.mycelius.message.Message.rsp)
  return p != NULL ? *p : *reinterpret_cast<const ::com::mycelius::message::Response*>(
      &::com::mycelius::message::_Response_default_instance_);
}
inline ::com::mycelius::message::Response* Message::release_rsp() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Message.rsp)
  clear_has_rsp();
  ::com::mycelius::message::Response* temp = rsp_;
  rsp_ = NULL;
  return temp;
}
inline ::com::mycelius::message::Response* Message::mutable_rsp() {
  set_has_rsp();
  if (rsp_ == NULL) {
    auto* p = CreateMaybeMessage<::com::mycelius::message::Response>(GetArenaNoVirtual());
    rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Message.rsp)
  return rsp_;
}
inline void Message::set_allocated_rsp(::com::mycelius::message::Response* rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rsp_;
  }
  if (rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rsp, submessage_arena);
    }
    set_has_rsp();
  } else {
    clear_has_rsp();
  }
  rsp_ = rsp;
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Message.rsp)
}

// optional .com.mycelius.message.Error err = 6;
inline bool Message::has_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_err() {
  if (err_ != NULL) err_->Clear();
  clear_has_err();
}
inline const ::com::mycelius::message::Error& Message::_internal_err() const {
  return *err_;
}
inline const ::com::mycelius::message::Error& Message::err() const {
  const ::com::mycelius::message::Error* p = err_;
  // @@protoc_insertion_point(field_get:com.mycelius.message.Message.err)
  return p != NULL ? *p : *reinterpret_cast<const ::com::mycelius::message::Error*>(
      &::com::mycelius::message::_Error_default_instance_);
}
inline ::com::mycelius::message::Error* Message::release_err() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Message.err)
  clear_has_err();
  ::com::mycelius::message::Error* temp = err_;
  err_ = NULL;
  return temp;
}
inline ::com::mycelius::message::Error* Message::mutable_err() {
  set_has_err();
  if (err_ == NULL) {
    auto* p = CreateMaybeMessage<::com::mycelius::message::Error>(GetArenaNoVirtual());
    err_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Message.err)
  return err_;
}
inline void Message::set_allocated_err(::com::mycelius::message::Error* err) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete err_;
  }
  if (err) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      err = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, err, submessage_arena);
    }
    set_has_err();
  } else {
    clear_has_err();
  }
  err_ = err;
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Message.err)
}

// optional .com.mycelius.message.Event evt = 7;
inline bool Message::has_evt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_evt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_evt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_evt() {
  if (evt_ != NULL) evt_->Clear();
  clear_has_evt();
}
inline const ::com::mycelius::message::Event& Message::_internal_evt() const {
  return *evt_;
}
inline const ::com::mycelius::message::Event& Message::evt() const {
  const ::com::mycelius::message::Event* p = evt_;
  // @@protoc_insertion_point(field_get:com.mycelius.message.Message.evt)
  return p != NULL ? *p : *reinterpret_cast<const ::com::mycelius::message::Event*>(
      &::com::mycelius::message::_Event_default_instance_);
}
inline ::com::mycelius::message::Event* Message::release_evt() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Message.evt)
  clear_has_evt();
  ::com::mycelius::message::Event* temp = evt_;
  evt_ = NULL;
  return temp;
}
inline ::com::mycelius::message::Event* Message::mutable_evt() {
  set_has_evt();
  if (evt_ == NULL) {
    auto* p = CreateMaybeMessage<::com::mycelius::message::Event>(GetArenaNoVirtual());
    evt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Message.evt)
  return evt_;
}
inline void Message::set_allocated_evt(::com::mycelius::message::Event* evt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete evt_;
  }
  if (evt) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      evt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, evt, submessage_arena);
    }
    set_has_evt();
  } else {
    clear_has_evt();
  }
  evt_ = evt;
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Message.evt)
}

// optional bytes data = 8;
inline bool Message::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Message::data() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Message.data)
  return data_.GetNoArena();
}
inline void Message::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Message.data)
}
#if LANG_CXX11
inline void Message::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Message.data)
}
#endif
inline void Message::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Message.data)
}
inline void Message::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Message.data)
}
inline ::std::string* Message::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Message.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_data() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Message.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Message.data)
}

// optional string id = 9;
inline bool Message::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Message::id() const {
  // @@protoc_insertion_point(field_get:com.mycelius.message.Message.id)
  return id_.GetNoArena();
}
inline void Message::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mycelius.message.Message.id)
}
#if LANG_CXX11
inline void Message::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mycelius.message.Message.id)
}
#endif
inline void Message::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mycelius.message.Message.id)
}
inline void Message::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mycelius.message.Message.id)
}
inline ::std::string* Message::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.mycelius.message.Message.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_id() {
  // @@protoc_insertion_point(field_release:com.mycelius.message.Message.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.mycelius.message.Message.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace mycelius
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::mycelius::message::Data_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mycelius::message::Data_DataType>() {
  return ::com::mycelius::message::Data_DataType_descriptor();
}
template <> struct is_proto_enum< ::com::mycelius::message::Message_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mycelius::message::Message_MessageType>() {
  return ::com::mycelius::message::Message_MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rpc_2eproto
