// Code generated from Query.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 20, 153,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 5, 4, 50, 10, 4, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 56, 10, 5, 3,
	6, 5, 6, 59, 10, 6, 3, 6, 6, 6, 62, 10, 6, 13, 6, 14, 6, 63, 3, 7, 5, 7,
	67, 10, 7, 3, 7, 6, 7, 70, 10, 7, 13, 7, 14, 7, 71, 3, 7, 3, 7, 6, 7, 76,
	10, 7, 13, 7, 14, 7, 77, 3, 8, 3, 8, 7, 8, 82, 10, 8, 12, 8, 14, 8, 85,
	11, 8, 3, 9, 3, 9, 7, 9, 89, 10, 9, 12, 9, 14, 9, 92, 11, 9, 3, 9, 3, 9,
	3, 9, 7, 9, 97, 10, 9, 12, 9, 14, 9, 100, 11, 9, 3, 9, 5, 9, 103, 10, 9,
	3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 123, 10, 10,
	3, 11, 3, 11, 5, 11, 127, 10, 11, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13, 3,
	13, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17, 3, 17, 3, 17,
	3, 18, 3, 18, 3, 19, 6, 19, 148, 10, 19, 13, 19, 14, 19, 149, 3, 19, 3,
	19, 2, 2, 20, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19,
	11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37,
	20, 3, 2, 8, 3, 2, 50, 59, 5, 2, 67, 92, 97, 97, 99, 124, 6, 2, 50, 59,
	67, 92, 97, 97, 99, 124, 3, 2, 36, 36, 3, 2, 41, 41, 5, 2, 11, 12, 15,
	15, 34, 34, 2, 169, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2,
	2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2,
	2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3,
	2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31,
	3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 3,
	39, 3, 2, 2, 2, 5, 41, 3, 2, 2, 2, 7, 49, 3, 2, 2, 2, 9, 55, 3, 2, 2, 2,
	11, 58, 3, 2, 2, 2, 13, 66, 3, 2, 2, 2, 15, 79, 3, 2, 2, 2, 17, 102, 3,
	2, 2, 2, 19, 122, 3, 2, 2, 2, 21, 124, 3, 2, 2, 2, 23, 128, 3, 2, 2, 2,
	25, 131, 3, 2, 2, 2, 27, 134, 3, 2, 2, 2, 29, 137, 3, 2, 2, 2, 31, 139,
	3, 2, 2, 2, 33, 141, 3, 2, 2, 2, 35, 144, 3, 2, 2, 2, 37, 147, 3, 2, 2,
	2, 39, 40, 7, 42, 2, 2, 40, 4, 3, 2, 2, 2, 41, 42, 7, 43, 2, 2, 42, 6,
	3, 2, 2, 2, 43, 50, 7, 46, 2, 2, 44, 45, 7, 99, 2, 2, 45, 46, 7, 112, 2,
	2, 46, 50, 7, 102, 2, 2, 47, 48, 7, 40, 2, 2, 48, 50, 7, 40, 2, 2, 49,
	43, 3, 2, 2, 2, 49, 44, 3, 2, 2, 2, 49, 47, 3, 2, 2, 2, 50, 8, 3, 2, 2,
	2, 51, 52, 7, 113, 2, 2, 52, 56, 7, 116, 2, 2, 53, 54, 7, 126, 2, 2, 54,
	56, 7, 126, 2, 2, 55, 51, 3, 2, 2, 2, 55, 53, 3, 2, 2, 2, 56, 10, 3, 2,
	2, 2, 57, 59, 7, 47, 2, 2, 58, 57, 3, 2, 2, 2, 58, 59, 3, 2, 2, 2, 59,
	61, 3, 2, 2, 2, 60, 62, 9, 2, 2, 2, 61, 60, 3, 2, 2, 2, 62, 63, 3, 2, 2,
	2, 63, 61, 3, 2, 2, 2, 63, 64, 3, 2, 2, 2, 64, 12, 3, 2, 2, 2, 65, 67,
	7, 47, 2, 2, 66, 65, 3, 2, 2, 2, 66, 67, 3, 2, 2, 2, 67, 69, 3, 2, 2, 2,
	68, 70, 9, 2, 2, 2, 69, 68, 3, 2, 2, 2, 70, 71, 3, 2, 2, 2, 71, 69, 3,
	2, 2, 2, 71, 72, 3, 2, 2, 2, 72, 73, 3, 2, 2, 2, 73, 75, 7, 48, 2, 2, 74,
	76, 9, 2, 2, 2, 75, 74, 3, 2, 2, 2, 76, 77, 3, 2, 2, 2, 77, 75, 3, 2, 2,
	2, 77, 78, 3, 2, 2, 2, 78, 14, 3, 2, 2, 2, 79, 83, 9, 3, 2, 2, 80, 82,
	9, 4, 2, 2, 81, 80, 3, 2, 2, 2, 82, 85, 3, 2, 2, 2, 83, 81, 3, 2, 2, 2,
	83, 84, 3, 2, 2, 2, 84, 16, 3, 2, 2, 2, 85, 83, 3, 2, 2, 2, 86, 90, 7,
	36, 2, 2, 87, 89, 10, 5, 2, 2, 88, 87, 3, 2, 2, 2, 89, 92, 3, 2, 2, 2,
	90, 88, 3, 2, 2, 2, 90, 91, 3, 2, 2, 2, 91, 93, 3, 2, 2, 2, 92, 90, 3,
	2, 2, 2, 93, 103, 7, 36, 2, 2, 94, 98, 7, 41, 2, 2, 95, 97, 10, 6, 2, 2,
	96, 95, 3, 2, 2, 2, 97, 100, 3, 2, 2, 2, 98, 96, 3, 2, 2, 2, 98, 99, 3,
	2, 2, 2, 99, 101, 3, 2, 2, 2, 100, 98, 3, 2, 2, 2, 101, 103, 7, 41, 2,
	2, 102, 86, 3, 2, 2, 2, 102, 94, 3, 2, 2, 2, 103, 18, 3, 2, 2, 2, 104,
	105, 7, 86, 2, 2, 105, 106, 7, 84, 2, 2, 106, 107, 7, 87, 2, 2, 107, 123,
	7, 71, 2, 2, 108, 109, 7, 72, 2, 2, 109, 110, 7, 67, 2, 2, 110, 111, 7,
	78, 2, 2, 111, 112, 7, 85, 2, 2, 112, 123, 7, 71, 2, 2, 113, 114, 7, 118,
	2, 2, 114, 115, 7, 116, 2, 2, 115, 116, 7, 119, 2, 2, 116, 123, 7, 103,
	2, 2, 117, 118, 7, 104, 2, 2, 118, 119, 7, 99, 2, 2, 119, 120, 7, 110,
	2, 2, 120, 121, 7, 117, 2, 2, 121, 123, 7, 103, 2, 2, 122, 104, 3, 2, 2,
	2, 122, 108, 3, 2, 2, 2, 122, 113, 3, 2, 2, 2, 122, 117, 3, 2, 2, 2, 123,
	20, 3, 2, 2, 2, 124, 126, 7, 63, 2, 2, 125, 127, 7, 63, 2, 2, 126, 125,
	3, 2, 2, 2, 126, 127, 3, 2, 2, 2, 127, 22, 3, 2, 2, 2, 128, 129, 7, 62,
	2, 2, 129, 130, 7, 63, 2, 2, 130, 24, 3, 2, 2, 2, 131, 132, 7, 64, 2, 2,
	132, 133, 7, 63, 2, 2, 133, 26, 3, 2, 2, 2, 134, 135, 7, 35, 2, 2, 135,
	136, 7, 63, 2, 2, 136, 28, 3, 2, 2, 2, 137, 138, 7, 62, 2, 2, 138, 30,
	3, 2, 2, 2, 139, 140, 7, 64, 2, 2, 140, 32, 3, 2, 2, 2, 141, 142, 7, 128,
	2, 2, 142, 143, 7, 63, 2, 2, 143, 34, 3, 2, 2, 2, 144, 145, 7, 48, 2, 2,
	145, 36, 3, 2, 2, 2, 146, 148, 9, 7, 2, 2, 147, 146, 3, 2, 2, 2, 148, 149,
	3, 2, 2, 2, 149, 147, 3, 2, 2, 2, 149, 150, 3, 2, 2, 2, 150, 151, 3, 2,
	2, 2, 151, 152, 8, 19, 2, 2, 152, 38, 3, 2, 2, 2, 17, 2, 49, 55, 58, 63,
	66, 71, 77, 83, 90, 98, 102, 122, 126, 149, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'('", "')'", "", "", "", "", "", "", "", "", "'<='", "'>='", "'!='",
	"'<'", "'>'", "'~='", "'.'",
}

var lexerSymbolicNames = []string{
	"", "", "", "AND", "OR", "INT", "DOUBLE", "ID", "STRING", "BOOLEAN", "EQ",
	"LE", "GE", "NE", "LT", "GT", "MAYBE", "SEP", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "AND", "OR", "INT", "DOUBLE", "ID", "STRING", "BOOLEAN",
	"EQ", "LE", "GE", "NE", "LT", "GT", "MAYBE", "SEP", "WS",
}

type QueryLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewQueryLexer(input antlr.CharStream) *QueryLexer {

	l := new(QueryLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Query.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// QueryLexer tokens.
const (
	QueryLexerT__0    = 1
	QueryLexerT__1    = 2
	QueryLexerAND     = 3
	QueryLexerOR      = 4
	QueryLexerINT     = 5
	QueryLexerDOUBLE  = 6
	QueryLexerID      = 7
	QueryLexerSTRING  = 8
	QueryLexerBOOLEAN = 9
	QueryLexerEQ      = 10
	QueryLexerLE      = 11
	QueryLexerGE      = 12
	QueryLexerNE      = 13
	QueryLexerLT      = 14
	QueryLexerGT      = 15
	QueryLexerMAYBE   = 16
	QueryLexerSEP     = 17
	QueryLexerWS      = 18
)
