// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package Server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// The tow target language are Java and JavaScript, so I will keep it close to there data type.
type Data_DataType int32

const (
	Data_DOUBLE  Data_DataType = 0
	Data_INTEGER Data_DataType = 1
	Data_STRING  Data_DataType = 2
	Data_BYTES   Data_DataType = 3
	// A JSON data structure if complex
	// data structure is needed. In that case the data will contain a JSON string.
	Data_JSON_STR Data_DataType = 4
	Data_BOOLEAN  Data_DataType = 5
)

var Data_DataType_name = map[int32]string{
	0: "DOUBLE",
	1: "INTEGER",
	2: "STRING",
	3: "BYTES",
	4: "JSON_STR",
	5: "BOOLEAN",
}
var Data_DataType_value = map[string]int32{
	"DOUBLE":   0,
	"INTEGER":  1,
	"STRING":   2,
	"BYTES":    3,
	"JSON_STR": 4,
	"BOOLEAN":  5,
}

func (x Data_DataType) Enum() *Data_DataType {
	p := new(Data_DataType)
	*p = x
	return p
}
func (x Data_DataType) String() string {
	return proto.EnumName(Data_DataType_name, int32(x))
}
func (x *Data_DataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Data_DataType_value, data, "Data_DataType")
	if err != nil {
		return err
	}
	*x = Data_DataType(value)
	return nil
}
func (Data_DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rpc_f6a42713dbb3309b, []int{0, 0}
}

type Message_MessageType int32

const (
	Message_REQUEST  Message_MessageType = 0
	Message_RESPONSE Message_MessageType = 1
	Message_ERROR    Message_MessageType = 2
	Message_EVENT    Message_MessageType = 3
	Message_TRANSFER Message_MessageType = 4
)

var Message_MessageType_name = map[int32]string{
	0: "REQUEST",
	1: "RESPONSE",
	2: "ERROR",
	3: "EVENT",
	4: "TRANSFER",
}
var Message_MessageType_value = map[string]int32{
	"REQUEST":  0,
	"RESPONSE": 1,
	"ERROR":    2,
	"EVENT":    3,
	"TRANSFER": 4,
}

func (x Message_MessageType) Enum() *Message_MessageType {
	p := new(Message_MessageType)
	*p = x
	return p
}
func (x Message_MessageType) String() string {
	return proto.EnumName(Message_MessageType_name, int32(x))
}
func (x *Message_MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Message_MessageType_value, data, "Message_MessageType")
	if err != nil {
		return err
	}
	*x = Message_MessageType(value)
	return nil
}
func (Message_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rpc_f6a42713dbb3309b, []int{5, 0}
}

// The inspiration came from http://www.jsonrpc.org/specification
// This is not a standard implementation, but it's follow the same principle.
type Data struct {
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// *
	// Interpretation of the data depend of the data type and is managed at the application level...
	DataBytes []byte         `protobuf:"bytes,2,req,name=dataBytes" json:"dataBytes,omitempty"`
	Type      *Data_DataType `protobuf:"varint,3,req,name=type,enum=com.mycelius.message.Data_DataType,def=3" json:"type,omitempty"`
	// *
	// Use to know how to interpret the JSON struct type...
	TypeName             *string  `protobuf:"bytes,4,opt,name=typeName" json:"typeName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_f6a42713dbb3309b, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

const Default_Data_Type Data_DataType = Data_BYTES

func (m *Data) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Data) GetDataBytes() []byte {
	if m != nil {
		return m.DataBytes
	}
	return nil
}

func (m *Data) GetType() Data_DataType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Data_Type
}

func (m *Data) GetTypeName() string {
	if m != nil && m.TypeName != nil {
		return *m.TypeName
	}
	return ""
}

type Request struct {
	// *
	// A String containing the name of the method to be invoked.
	Method *string `protobuf:"bytes,1,req,name=method" json:"method,omitempty"`
	// *
	// A Structured value that holds the parameter values to be used during the invocation of the method.
	// This member MAY be omitted.
	Params []*Data `protobuf:"bytes,2,rep,name=params" json:"params,omitempty"`
	// *
	// An identifier established by the Client, it's a uuid
	Id                   *string  `protobuf:"bytes,3,req,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_f6a42713dbb3309b, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func (m *Request) GetParams() []*Data {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Request) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

// *
// When a rpc call is made, the Server MUST reply with a Response, except for in the case of Notifications.
type Response struct {
	// *
	// At least on result is return for a given request, but more than one result can be return... it can be view as a tuple...
	Results []*Data `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	// *
	// The id matching the associated request.
	Id                   *string  `protobuf:"bytes,2,req,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_f6a42713dbb3309b, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResults() []*Data {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Response) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type Error struct {
	// *
	// An error code to identify the error...
	Code *int32 `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	// *
	// The description of the error...
	Message *string `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	// *
	// The id of the request that fail.
	Id *string `protobuf:"bytes,3,req,name=id" json:"id,omitempty"`
	// *
	// Optional data dump if needed...
	Data                 []byte   `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_f6a42713dbb3309b, []int{3}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Error) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Error) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Event struct {
	// *
	// The event number...
	Code *int32 `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	// *
	// The event name, mostly use if error append...
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// *
	// The data associated whit the event.
	EvtData              []*Data  `protobuf:"bytes,3,rep,name=evtData" json:"evtData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_f6a42713dbb3309b, []int{4}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Event) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Event) GetEvtData() []*Data {
	if m != nil {
		return m.EvtData
	}
	return nil
}

// *
// A container to handle all message type as the same way...
type Message struct {
	Type *Message_MessageType `protobuf:"varint,1,req,name=type,enum=com.mycelius.message.Message_MessageType,def=2" json:"type,omitempty"`
	// * If the message is bigger than the allowed size it will be split into
	//  multiple smaller message.
	Index *int32 `protobuf:"zigzag32,2,req,name=index" json:"index,omitempty"`
	Total *int32 `protobuf:"varint,3,req,name=total" json:"total,omitempty"`
	// * depending of type of these tree type will contain the message. *
	Rqst *Request  `protobuf:"bytes,4,opt,name=rqst" json:"rqst,omitempty"`
	Rsp  *Response `protobuf:"bytes,5,opt,name=rsp" json:"rsp,omitempty"`
	Err  *Error    `protobuf:"bytes,6,opt,name=err" json:"err,omitempty"`
	Evt  *Event    `protobuf:"bytes,7,opt,name=evt" json:"evt,omitempty"`
	// *
	// If the message is sent in multiple pass, this will contain the chunk...
	Data []byte `protobuf:"bytes,8,opt,name=data" json:"data,omitempty"`
	// *
	//  The message id if any...
	//  the same id of sub-message...
	Id                   *string  `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_f6a42713dbb3309b, []int{5}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

const Default_Message_Type Message_MessageType = Message_ERROR

func (m *Message) GetType() Message_MessageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Message_Type
}

func (m *Message) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *Message) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *Message) GetRqst() *Request {
	if m != nil {
		return m.Rqst
	}
	return nil
}

func (m *Message) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *Message) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *Message) GetEvt() *Event {
	if m != nil {
		return m.Evt
	}
	return nil
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Data)(nil), "com.mycelius.message.Data")
	proto.RegisterType((*Request)(nil), "com.mycelius.message.Request")
	proto.RegisterType((*Response)(nil), "com.mycelius.message.Response")
	proto.RegisterType((*Error)(nil), "com.mycelius.message.Error")
	proto.RegisterType((*Event)(nil), "com.mycelius.message.Event")
	proto.RegisterType((*Message)(nil), "com.mycelius.message.Message")
	proto.RegisterEnum("com.mycelius.message.Data_DataType", Data_DataType_name, Data_DataType_value)
	proto.RegisterEnum("com.mycelius.message.Message_MessageType", Message_MessageType_name, Message_MessageType_value)
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_f6a42713dbb3309b) }

var fileDescriptor_rpc_f6a42713dbb3309b = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0x8d, 0xfe, 0x2c, 0xeb, 0x3a, 0x04, 0x7d, 0x43, 0xf8, 0x10, 0xe9, 0x0f, 0x46, 0xdd, 0xb8,
	0x8b, 0x9a, 0xd6, 0x64, 0xd5, 0x45, 0x21, 0xc6, 0xd3, 0x90, 0xe2, 0x48, 0xe9, 0x95, 0x5c, 0xc8,
	0xaa, 0x08, 0x6b, 0x68, 0x0d, 0x96, 0xa5, 0xcc, 0x8c, 0x4d, 0xfd, 0x56, 0x7d, 0xaf, 0xbe, 0x44,
	0x99, 0xd1, 0xd8, 0x49, 0x8b, 0xd3, 0x6c, 0xac, 0xb9, 0xf2, 0x39, 0x47, 0x73, 0xef, 0x39, 0x17,
	0x02, 0xde, 0xcc, 0x87, 0x0d, 0xaf, 0x65, 0x4d, 0x4e, 0xe7, 0x75, 0x35, 0xac, 0xb6, 0x73, 0xb6,
	0x5c, 0xac, 0xc5, 0xb0, 0x62, 0x42, 0x14, 0xdf, 0x58, 0xfc, 0xcb, 0x02, 0x77, 0x52, 0xc8, 0x82,
	0x10, 0x70, 0x57, 0x45, 0xc5, 0x22, 0xab, 0x6f, 0x0f, 0x02, 0xd4, 0x67, 0xf2, 0x1c, 0x82, 0xb2,
	0x90, 0xc5, 0x78, 0x2b, 0x99, 0x88, 0xec, 0xbe, 0x3d, 0x38, 0xc6, 0xfb, 0x17, 0xe4, 0x03, 0xb8,
	0x72, 0xdb, 0xb0, 0xc8, 0xe9, 0xdb, 0x83, 0x93, 0xd1, 0xab, 0xe1, 0x21, 0xfd, 0xa1, 0xd2, 0xd6,
	0x3f, 0xf9, 0xb6, 0x61, 0xef, 0xbd, 0xf1, 0x6d, 0x4e, 0x33, 0xd4, 0x3c, 0x72, 0x06, 0x5d, 0xf5,
	0x4c, 0xd4, 0x57, 0xdd, 0xbe, 0x35, 0x08, 0x70, 0x5f, 0xc7, 0x33, 0xe8, 0xee, 0x48, 0x04, 0xa0,
	0x33, 0x49, 0x67, 0xe3, 0x29, 0x0d, 0x8f, 0x48, 0x0f, 0xfc, 0xab, 0x24, 0xa7, 0x97, 0x14, 0x43,
	0x4b, 0xfd, 0x91, 0xe5, 0x78, 0x95, 0x5c, 0x86, 0x36, 0x09, 0xa0, 0xd5, 0x0e, 0x1d, 0x72, 0x0c,
	0xdd, 0x4f, 0x59, 0x9a, 0x7c, 0xcd, 0x72, 0x0c, 0x5d, 0xc5, 0x18, 0xa7, 0xe9, 0x94, 0x5e, 0x24,
	0xa1, 0x17, 0x33, 0xf0, 0x91, 0xdd, 0xad, 0x99, 0x90, 0xe4, 0x7f, 0xe8, 0x54, 0x4c, 0x7e, 0xaf,
	0x4b, 0xd3, 0xb1, 0xa9, 0xc8, 0x08, 0x3a, 0x4d, 0xc1, 0x8b, 0x4a, 0x35, 0xec, 0x0c, 0x7a, 0xa3,
	0xb3, 0xc7, 0xfb, 0x42, 0x83, 0x24, 0x27, 0x60, 0x2f, 0x4a, 0x3d, 0x87, 0x00, 0xed, 0x45, 0x19,
	0xdf, 0x40, 0x17, 0x99, 0x68, 0xea, 0x95, 0x60, 0xe4, 0x1c, 0x7c, 0xce, 0xc4, 0x7a, 0x29, 0x45,
	0x64, 0x3d, 0x29, 0xb8, 0x83, 0x1a, 0x45, 0x7b, 0xaf, 0x78, 0x0b, 0x1e, 0xe5, 0xbc, 0xe6, 0xca,
	0xa6, 0x79, 0x5d, 0xb6, 0x36, 0x79, 0xa8, 0xcf, 0x24, 0x02, 0xdf, 0xa8, 0x18, 0xc6, 0xae, 0xfc,
	0xfb, 0x62, 0x8a, 0xad, 0xfc, 0xd3, 0xe3, 0x3e, 0x46, 0x7d, 0x8e, 0x19, 0x78, 0x74, 0xc3, 0x56,
	0xf2, 0xa0, 0xf4, 0x2e, 0x15, 0xf6, 0x83, 0x54, 0x9c, 0x83, 0xcf, 0x36, 0x52, 0xdd, 0x37, 0x72,
	0x9e, 0xee, 0xc8, 0x40, 0xe3, 0x9f, 0x0e, 0xf8, 0xd7, 0xe6, 0x5a, 0x13, 0x93, 0x1c, 0x4b, 0x27,
	0xe7, 0xf5, 0x61, 0xfa, 0xf5, 0x9f, 0xcf, 0x36, 0x3f, 0x14, 0x31, 0x45, 0x93, 0x9f, 0x53, 0xf0,
	0x16, 0xab, 0x92, 0xfd, 0xd0, 0x97, 0xfb, 0x0f, 0xdb, 0x42, 0xbd, 0x95, 0xb5, 0x2c, 0x96, 0xba,
	0x6b, 0x0f, 0xdb, 0x82, 0xbc, 0x03, 0x97, 0xdf, 0x09, 0xa9, 0x1b, 0xef, 0x8d, 0x5e, 0x1c, 0xfe,
	0xa2, 0x89, 0x06, 0x6a, 0x28, 0x79, 0x0b, 0x0e, 0x17, 0x4d, 0xe4, 0x69, 0xc6, 0xcb, 0xc7, 0x18,
	0xad, 0xcb, 0xa8, 0xa0, 0xe4, 0x0d, 0x38, 0x8c, 0xf3, 0xa8, 0xa3, 0x19, 0xcf, 0x0e, 0x33, 0xb4,
	0x8b, 0xa8, 0x70, 0x1a, 0xbe, 0x91, 0x91, 0xff, 0x4f, 0xb8, 0x72, 0x06, 0x15, 0x6e, 0xef, 0x5d,
	0xf7, 0xde, 0x3b, 0xe3, 0x6f, 0xa0, 0x97, 0x47, 0xc5, 0x64, 0x0a, 0xbd, 0x07, 0xe3, 0x52, 0xd9,
	0x47, 0xfa, 0x79, 0x46, 0xb3, 0x3c, 0x3c, 0x52, 0x6b, 0x81, 0x34, 0xbb, 0x49, 0x93, 0x8c, 0x86,
	0x96, 0xda, 0x17, 0x3d, 0xcb, 0x76, 0x75, 0xe8, 0x17, 0x9a, 0xe4, 0xed, 0xea, 0xe4, 0x78, 0x91,
	0x64, 0x1f, 0x29, 0x86, 0xee, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0x2b, 0xdb, 0xf6, 0x3d,
	0x04, 0x00, 0x00,
}
